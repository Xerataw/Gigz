generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                                                 Int                  @id @default(autoincrement())
  email                                              String               @unique(map: "Account_email_key") @db.VarChar(255)
  password                                           String               @db.VarChar(255)
  creation_date                                      DateTime             @default(now()) @db.DateTime(0)
  phone_number                                       String?              @unique(map: "phone_number") @db.VarChar(255)
  email_validated                                    Int                  @default(0) @db.TinyInt
  profile_type                                       account_profile_type
  account_genre                                      account_genre[]
  artist                                             artist[]
  host                                               host[]
  liked_account_liked_account_liker_accountToaccount liked_account[]      @relation("liked_account_liker_accountToaccount")
  liked_account_liked_account_liked_accountToaccount liked_account[]      @relation("liked_account_liked_accountToaccount")
  settings                                           settings[]
}

model account_genre {
  id         Int     @id @default(autoincrement())
  account_id Int
  genre_id   Int
  account    account @relation(fields: [account_id], references: [id], onDelete: Cascade, map: "account_genre_ibfk_3")
  genre      genre   @relation(fields: [genre_id], references: [id], onDelete: Cascade, map: "account_genre_ibfk_4")

  @@unique([account_id, genre_id], map: "account_id_genre_id")
  @@index([genre_id], map: "genre_id")
}

model artist {
  id               Int     @id @default(autoincrement())
  name             String? @db.VarChar(255)
  description      String? @db.LongText
  instagram_link   String? @db.VarChar(255)
  facebook_link    String? @db.VarChar(255)
  spotify_link     String? @db.VarChar(255)
  apple_music_link String? @db.VarChar(255)
  deezer_link      String? @db.VarChar(255)
  soundcloud_link  String? @db.VarChar(255)
  youtube_link     String? @db.VarChar(255)
  website_link     String? @db.VarChar(255)
  music_link       String? @db.VarChar(255)
  city_id          Int?
  account_id       Int
  city             city?   @relation(fields: [city_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "artist_ibfk_1")
  account          account @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "artist_ibfk_2")

  @@index([city_id], map: "city_id")
  @@index([account_id], map: "artist_ibfk_2")
}

model capacity {
  id       Int    @id @default(autoincrement())
  max      Int    @db.UnsignedInt
  color    String @db.VarChar(7)
  bg_color String @db.VarChar(7)
  host     host[]
}

model genre {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  account_genre account_genre[]
}

model host {
  id             Int        @id @default(autoincrement())
  name           String?    @db.VarChar(255)
  description    String?    @db.LongText
  website_link   String?    @db.VarChar(255)
  facebook_link  String?    @db.VarChar(255)
  instagram_link String?    @db.VarChar(255)
  capacity_id    Int?
  host_type_id   Int?
  address        String?    @db.VarChar(255)
  city_id        Int?
  account_id     Int
  capacity       capacity?  @relation(fields: [capacity_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "host_ibfk_1")
  host_type      host_type? @relation(fields: [host_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "host_ibfk_2")
  city           city?      @relation(fields: [city_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "host_ibfk_3")
  account        account    @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "host_ibfk_4")

  @@index([capacity_id], map: "capacity_id")
  @@index([host_type_id], map: "host_type_id")
  @@index([city_id], map: "city_id")
  @@index([account_id], map: "host_ibfk_4")
}

model host_type {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(255)
  color    String @db.VarChar(7)
  bg_color String @db.VarChar(7)
  host     host[]
}

model liked_account {
  id                                           Int     @id @default(autoincrement())
  liker_account                                Int
  liked_account                                Int
  account_liked_account_liker_accountToaccount account @relation("liked_account_liker_accountToaccount", fields: [liker_account], references: [id], onDelete: Cascade, map: "liked_account_ibfk_1")
  account_liked_account_liked_accountToaccount account @relation("liked_account_liked_accountToaccount", fields: [liked_account], references: [id], onDelete: Cascade, map: "liked_account_ibfk_2")

  @@unique([liker_account, liked_account], map: "liker_account_liked_account")
  @@index([liked_account], map: "liked_account")
}

model settings {
  id             Int                @id @default(autoincrement())
  invisible_mode Int                @default(0) @db.TinyInt
  dark_mode      settings_dark_mode @default(disabled)
  account_id     Int
  account        account            @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "settings_ibfk_1")

  @@index([account_id], map: "account_id")
}

model city {
  id            Int      @id @default(autoincrement())
  name          String?  @db.VarChar(45)
  latitude_deg  Float?   @db.Float
  latitude_dms  String?  @db.VarChar(8)
  latitude_grd  String?  @db.VarChar(8)
  longitude_deg Float?   @db.Float
  longitude_dms String?  @db.VarChar(9)
  longitude_grd String?  @db.VarChar(9)
  zip_code      String?  @db.VarChar(255)
  artist        artist[]
  host          host[]

  @@index([zip_code], map: "ville_code_postal")
  @@index([longitude_deg, latitude_deg], map: "ville_longitude_latitude_deg")
  @@index([name], map: "ville_nom_reel")
}

enum settings_dark_mode {
  enabled
  disabled
  auto
}

enum account_profile_type {
  host
  artist
}
